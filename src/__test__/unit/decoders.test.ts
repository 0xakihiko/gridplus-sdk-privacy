import {
  decodeConnectResponse,
  decodeFetchActiveWalletResponse,
  decodeGetAddresses,
  decodeGetKvRecordsResponse,
  decodeSignResponse,
} from '../../functions';
import { getP256KeyPair } from '../../util';
import { buildFirmwareConstants } from '../utils/builders';
import { REUSABLE_KEY } from '../utils/helpers';
import {
  connectDecryptedData,
  fetchActiveWalletDecryptedData,
  getKvRecordsDecryptedData,
  signEthDecryptedData,
  signEthMsgDecryptedData,
} from './__mocks__/decoderData';

describe('decoders', () => {
  test('connect', () => {
    const decryptedData = connectDecryptedData;
    const key = getP256KeyPair(Buffer.from(REUSABLE_KEY, 'hex'));
    expect(decodeConnectResponse(decryptedData, key)).toMatchSnapshot();
  });

  test('fetchActiveWallet', () => {
    const decryptedData = fetchActiveWalletDecryptedData;
    expect(decodeFetchActiveWalletResponse(decryptedData)).toMatchSnapshot();
  });

  test('getAddresses', () => {
    const decryptedData = Buffer.from([0, 0, 0]);
    const flag = 0;
    expect(decodeGetAddresses(decryptedData, flag)).toMatchSnapshot();
  });

  test('sign BTC', () => {
    const data = Buffer.from('5b302c20302c20305d', 'hex');
    const request = {
      payload: Buffer.from(
        'c4050000003100008001000080000000800100000000000000e80300006f1826efb6399e3b7978b4af1728f1e00',
        'hex',
      ),
      schema: 0,
      origData: {
        prevOuts: [[{}]],
        recipient: 'mhifA1DwiMPHTjSJM8FFSL8ibrzWaBCkVT',
        value: 1000,
        fee: 1000,
        changePath: [2147483697, 2147483649, 2147483648, 1, 0],
        fwConstants: buildFirmwareConstants(),
      },
      changeData: { value: 8000 },
    };
    const currency = 'BTC';
    const isGeneric = false;
    expect(
      decodeSignResponse({ data, request, isGeneric, currency }),
    ).toMatchSnapshot();
  });

  test('sign ETH', () => {
    const data = signEthDecryptedData;
    const request = {
      payload: Buffer.from(
        '040000000100050000002c0000803c00008000000080000000000000000000fd0b3e957d90bb196dcfbd4424af1430b3d0595841d37fb0fba9f0cfdf5286dae
        'hex',
      ),
      extraDataPayloads: [],
      schema: 5,
      curveType: 0,
      encodingType: 4,
      hashType: 1,
      omitPubkey: false,
      origPayloadBuf: Buffer.from(
        '02f90bf901808447868c008447868c0082c35094e242e54155b1abc71fc118065270cecaaf8b776885e8d4a51000b90bcbe34859b84f2f0f7bd6aff353125625b88ee6b106042bc9a1b51a498a257d1b2b0538d3ce1cadcf1faf2d6bada2cd4433a1f1f586d07b5d99519d4ff67f6d38a35908cff0c0e55a5a7557b3dd5158307a20347e150e0967c8c563dc3334ebaed0364b5e9944e930348a19dc85fc79d887e9501d15645c69a15dd815410f8bb34699efe12e22951eed3d3a2615bf31a14cbfae8475bbce94fb9019dd9a9c7b1af146dc59a9dbd464219cb2da82f310592a18c5fc2075174f0a40398e1e7d483c226313c51b2baaaf14e9a7b3ae83be693bbcb4678b7fe2dc777d8b2d40c5bc4016ed2788e3c6fcc0d4f1445eda5c359f9051b7dc04c956d03b67baebc0de67eee5df18bda89f26ed9d342a0411d3a24ff3b83e214005644e2f9b878e27914464f710a88d15d9d2005bedb403eddc9004e8babd09a786c6cc1aeeb2d0db30d06306f551f941cf7399d6379fd56b7ee1762e9fcd57b4d0717b722360caa3274bb4c615ba9f286a7f1205dea9ad691f611507e0715fa60f5c198b0f21bcbd0bd278f2340f5490781a95921ce808f7b2e9e371abe96bb16b7441283957154c8f5060d47c376558914a6c637a857e7aa4fde004a27cb989b68302d577349d1a516b58777a955f281ce2afa22f36304e44810a53204347788445c3a3fbb1b3cbf14f605c04f432ebf528c228708c9ad1b2c23110d566a8815e4ea43fcde9d1895ab061ce323bc76ced74817b393a3d8be77ea5bae6bcb7c7590432f54b240447321ccafa9fe11907a17784946d774b11382e07dfc0b8a8ee0177a980b43ba90feeaa6c47c3bf373ca1c19927b17e4cfcc39c7bd7c5b67fdf922d8641e2ff62cc8ea0c2d4f770b649b84e7af29a7595355d18e06e872812e112fdb8255e8fddd27a6b0e6de51de724176ee8abb17e1d480083d473e7b779f46f37db38da58f5ad4c0d19474ecae0d9d059e8d62f27f818d9649a55000610987a2b8bd892ae851cd571499019b280a42d7988b32d9512f77d1f701e16baff9e4d1bd2ccbfabdf5af133934b5fd5ed69f20128018c2b7abf9ecf96fa3406bf19bdbd2f402b612bd7e2265725b9dacbc7aa31f1c05fb690c74dff088137dedcefbe560187d12ac7e8eeecce06b1024fb1cc8f2b363032ad3a84446532730ef879ba35be36ac0385ce60ef81f593712c76a21cbbc56e81194db29aec74ac900e15bc354f0567572ee5ba3105dcfc1cbd897e3452535b63b9cfb017d0fe331cf6d8ce377d96307e2be7c1cb7179abe9c41483829a01222cb2936854308262ad1d219cbd4e53fdb2df1451db9358cc1c4fd8eacf23d98a9f63aa95aef3115ebb5eb6a793d4a2e5f8933a609d0330ae13542a41beba616a15c59135f111c4e1901d278a60028b40bc6e9e15899407484ccb893a43e3d962f4aafb191334f2c3fbb0a9868cd358a4e4ae94786cd5df4952cad67593e91cb821b4d0c2c4b77945c2f603e34b6b9638fc0d57d476f592747f78dc86d0833cc589d07b60ec53b9daa3fbf9efc1df71ad79be5202e5dfc39d7e80e6a76b7045b770a4e3b0d27291e8bdc1a8d7166082899b0a3200321489cc7760ce454366656bd895c44a7bb3107e022bb0477c414a7a7d3a212e4f3f02aea9c7d762e2d17aa2b4b0a32c2e42139026ba878b360197524f177084c8d056d175a4befd6a83c33fe216a7ad6ffb95a076c458e40255eea6ce617366ed53f6e4f69e893db4ef9b367ec383759839c1f4b0e2708d40662cd69dda8e5f9ba7364ab9acc1ea340f82c43e23b1040832e139c025b73a84b7d58608b8a8d002d88df458cc593dddfae6d732b70bf35d32e5e868a3acf19cd83c9db8de926236ab87388a771fe7ad9946180bc75badb0bc7e0f0cf4a8e36d3794284f4e81d90f85433246a62861a72d4d15f1740695636fb9274bae63875ad4154861a2e95933d5ab131b83025d349b167ea3e59059870f732f72acd9060299896e6f6f76049ac09727b1c8040ea61027e08212546668f41dc0d3dc9e924ab27e1378ec58b44c3e5d40be5d8fa7a6b520d9f0b3f5a2d2501382653ce536d908da4c7ff191b2d6705c4c4a6f47e5f5b40b8bb741f6fe485a60d07de97207c4324d57cdd6b4eff4384b13fbc8c86d4695b892520df148bcb1ee0dbf1267014b92eeefb77298eae64dcc4d9c045c2e974c8e12ea1ecf08865961223f801fec4bdfdef3cbfa643384e1ddb3a7e73023c7368e2e9082c8181551b7b43a41d9aaf9b06a63d508156ffb890f75217c91ab00dedb0fbcfc343b7c23aa4b88d4c84b41bb32e158a55e1dc897453d970eb7466dee714d368884691e08db69c4fc454a86f5af5d6ffad2d8f62f94294c623fe86159ca307cee1a64350c939bbaaeb62559803033bb59b791d1c8a02a72e37177333d8aa03d4423fc35cf364ba1dd836abf41abe485d066cfe34f026be2a6b81f9b6b2f4e9f69bca71f97ad46911a56229202d9668249e2cd0dfe0982b92c4be7a5e4a8d70cfd436fdf9e0f913c4956b91f4ee07f96045ffe92060bc7b8f99c5dbc1d4903586ecebf86837f1e920ee5c42b648d083b993ba4cbc92731b0ad680a0c776099ac605c3ea5ecee9eb089b31d0d5122348180f89d59fc01192ddbe7a3aac72d9821ffb51dd1ecb382352c07270cbdcb853d782b9b007e19f61a7c901d079a2aa899c257c00f517272d87106d92cfbc66b287587520ab899dbc709cc780915eae76d6b32c5ec5450806d1696f553f79614276c5fa8de2a1dfedc3737bc0bc57ee1ee86bef5036ff1741f91ed6db7db07fa5d2845d8012e01f06bd3b2963a2ff3e52ce6a93668011ab09e326c05e596ef12993a2ce2f34646f4d17cbef97d6e88ea65731cd5dd7bf8cce9c1893a7a7a36cbfae8baed3f3a2a0e94412d0c8524c430c4765f9d096ff3a180fb469fd6fc8bb7c536f5b37cd1928906c1449da4cc3230bb3e556510319b8c801d92b0b390db7798f4f8b7e2b5359f5f79cb0df654c4bb3398b5210f6d3309a3fb58e640723bf44d908750ce339701a7794e5bbd9ab240890dd29578b7201a4ca291833a13e77eead114cf6ad61b2e32f2d8e6c1352f12fb4ed1475f782057747b15e5a43d9a14b98a3b10172f7e0a675e2b916fd366fa9707cfb090dd99054c7202b86b03747990009d13f751f6f45a8bf56736e101d873bf5753ada69c9456708f7fd88fc35481c76f9c0f258296a893b73b73a0605ff09f113f69e3ac601328d4e6f0da7be8e5dad49e2099574066fa55efbd019a8650d294d2d848617d74b7d4710e0c262a02922f78e76423c4c94ae53635a21de1f4951b679d5cb78993d818728bbca1e101e04016b73d986ee02d6110c512ec13e6b9869f971b39dcdfee3f53f38879108b5c553df43403243e01954c8883955243ba92721c65c84170cea37d29a82b13666e8c6c346309308165166ea762a18d5d1f7bb0a713c9574a7e614923f40cab4360190d52535dee46b90cde15d1375b1ef6fb52ff26d30819ba7dc2e01e2985140985db4475cc5cf312f26004e42d7526e51695eb8f891d7311237974bc341a2c351ed62318bf04f9c07e46985d9822c5e3dcbee9defa983a47f331a7638cb188497f33a6856e9232a06ba9dc6c790c687b328fa35772177da32792e7dc22a70c1b1c542efb9ad34046bedf89a12c93dc4539a0535cbd7932f78c6c9cd253fdb5cea6fc76bea2093ae1a0ce3b13cda17f4dc42d6a37204f49706139623368016126ed5ba788fb54d878b66428191b01a6c3b00a94118b416e6e7bd76edc74d0cce62e943e8a575e81638b9caa1de6ad122d19e5741129f5b2a53516b87355fd8ca0e7f93fb6438402eec8a20975f1bc8d6efcdaf68c11d59a72a14a1bb3ff279cbd4b01353ede78833da2356b36f37033689077e71f626595d9878b2a553b22662e189321a31bb3910d9128245be9cfcd1c19015c2689cfeabd236fa907ec11d93489660ef280697ecc6471761eaea19e6513309f8b7988f048252bab478421041efb086858a6cfc3eafb8dde97b79ce83f37bfe042d1114de8ee60d40b6190d7d6fa2f66bddbcb307cd7e8d0b7d330135f2251b663618f17ef16c7605d1ae9afe7a587f78a405ef2d45f57c25e458aee5aab475a130d5b5f334889957f242cb40db12c15530a5e841df78646c6578573bee178f10910e40ebe3505a745334b8f9daff70963c40a8d47a39954f0a950d2436b9c7138f46e94f2b884477e680dfba960e3f2251337200f1858fe12a3c3273ec0',
        'hex',
      ),
    };
    const isGeneric = false;
    expect(decodeSignResponse({ data, request, isGeneric })).toMatchSnapshot();
  });

  test('sign ETH_MSG', () => {
    const data = signEthMsgDecryptedData;
    const request = {
      schema: 3,
      payload: Buffer.from(
        ' 00050000002c0000803c000080000000800000000000000000010300abcdef
        'hex',
      ),
      input: {
        signerPath: [2147483692, 2147483708, 2147483648, 0, 0],
        payload: Buffer.from('abcdef', 'hex'),
        protocol: 'signPersonal',
        fwConstants: buildFirmwareConstants(),
      },
      msg: Buffer.from('abcdef', 'hex'),
      extraDataPayloads: [],
    };
    const currency = 'ETH_MSG';
    const isGeneric = false;
    expect(
      decodeSignResponse({ data, request, isGeneric, currency }),
    ).toMatchSnapshot();
  });

  test('getKvRecords', () => {
    const decryptedData = getKvRecordsDecryptedData;
    const fwConstants = buildFirmwareConstants();
    expect(
      decodeGetKvRecordsResponse(decryptedData, fwConstants),
    ).toMatchSnapshot();
  });
});
